<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <link rel="icon" type="image/png" href="assets/img/favicon.ico">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>

    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport'/>
    <meta name="viewport" content="width=device-width"/>


    <!-- Bootstrap core CSS     -->
    <link href="assets/css/bootstrap.min.css" rel="stylesheet"/>

    <!-- Animation library for notifications   -->
    <link href="assets/css/animate.min.css" rel="stylesheet"/>

    <!--  Light Bootstrap Table core CSS    -->
    <link href="assets/css/light-bootstrap-dashboard.css" rel="stylesheet"/>


    <!--  CSS for Demo Purpose, don't include it in your project     -->
    <link href="assets/css/demo.css" rel="stylesheet"/>


    <!--     Fonts and icons     -->
    <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,700,300' rel='stylesheet' type='text/css'>
    <link href="assets/css/pe-icon-7-stroke.css" rel="stylesheet"/>

</head>
<body>

<div class="wrapper">
    <div class="sidebar" data-color="blue" data-image="assets/img/sidebar-6.jpg">

        <!--

            Tip 1: you can change the color of the sidebar using: data-color="blue | azure | green | orange | red | purple"
            Tip 2: you can also add an image using data-image tag

        -->

        <div class="sidebar-wrapper">
            <div class="logo">
                <a class="simple-text">
                    My Smart Mirror
                </a>
            </div>

            <ul class="nav">
                <li class="active">
                    <a href="home">
                        <i class="pe-7s-home"></i>
                        <p>Home</p>
                    </a>
                </li>
                <li>
                    <a href="user">
                        <i class="pe-7s-user"></i>
                        <p>User Profile</p>
                    </a>
                </li>
                <li>
                    <a href="maps">
                        <i class="pe-7s-map-marker"></i>
                        <p>Maps</p>
                    </a>
                </li>
                <li>
                    <a href="apikeys">
                        <i class="pe-7s-key"></i>
                        <p>Api Keys</p>
                    </a>
                </li>
                <li>
                    <a href="settings">
                        <i class="pe-7s-config"></i>
                        <p>Settings</p>
                    </a>
                </li>
                <li class="active-pro">
                    <a href="support">
                        <i class="pe-7s-users"></i>
                        <p>Product Support</p>
                    </a>
                </li>

            </ul>
        </div>
    </div>

    <div class="main-panel">
        <nav class="navbar navbar-default navbar-fixed">
            <div class="container-fluid">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse"
                            data-target="#navigation-example-2">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#">Dashboard</a>
                </div>
                <div class="collapse navbar-collapse">
                    <ul class="nav navbar-nav navbar-left">
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                <i class="fa fa-globe"></i>
                                <b class="caret hidden-sm hidden-xs"></b>
                                <span class="notification hidden-sm hidden-xs">5</span>
                                <p class="hidden-lg hidden-md">
                                    5 Notifications
                                    <b class="caret"></b>
                                </p>
                            </a>
                            <ul class="dropdown-menu">
                                <li><a href="#">Notification 1</a></li>
                                <li><a href="#">Notification 2</a></li>
                                <li><a href="#">Notification 3</a></li>
                                <li><a href="#">Notification 4</a></li>
                                <li><a href="#">Another notification</a></li>
                            </ul>
                        </li>
                    </ul>

                    <ul class="nav navbar-nav navbar-right">
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                <p>
                                    Dropdown
                                    <b class="caret"></b>
                                </p>
                            </a>
                            <ul class="dropdown-menu">
                                <li><a href="#">Action</a></li>
                                <li><a href="#">Another action</a></li>
                                <li><a href="#">Something</a></li>
                                <li><a href="#">Another action</a></li>
                                <li><a href="#">Something</a></li>
                                <li class="divider"></li>
                                <li><a href="#">Separated link</a></li>
                            </ul>
                        </li>
                        <li>
                            <a href="users/logout">
                                <p>Log out</p>
                            </a>
                        </li>
                        <li class="separator hidden-lg hidden-md"></li>
                    </ul>
                </div>
            </div>
        </nav>

        <form method="post" action="/home">
            <!-- Need to pass the user's ID to the form that will be posted -->
            <input type="hidden" name="_id" value="{{user._id}}">
            <div class="content">
                <div class="container-fluid">

                    <div class="row">
                        <div class="col-md-6">
                            <div class="card ">
                                <div class="header">
                                    <h4 class="title">Stocks</h4>
                                    <p class="category">Backend development</p>
                                </div>
                                <div class="content">
                                    <div class="table-full-width">
                                        <input type="hidden" name="stocks" id="stocks" value="{{user.stocks}}">
                                        <table class="table">
                                            <tbody id="stock_UL">
                                            </tbody>
                                        </table>
                                        <input type="text" id="stock_input" placeholder="Title...">
                                        <span onclick="newStockElement()"
                                              class="btn btn-info btn-fill pull-right">Add</span>
                                    </div>

                                    <div class="footer">
                                        <hr>
                                        <div class="stats">
                                            <i class="fa fa-history"></i> Updated 3 minutes ago
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="card ">
                                <div class="header">
                                    <h4 class="title">Reminders</h4>
                                    <p class="category">Backend development</p>
                                </div>
                                <div class="content">
                                    <div class="table-full-width">
                                        <input type="hidden" name="to_do_list" id="to_do_list"
                                               value="{{user.to_do_list}}">
                                        <table class="table">
                                            <tbody id="todo_UL">

                                            </tbody>
                                        </table>
                                        <input type="text" id="todo_input" placeholder="Title...">
                                        <span onclick="newToDoElement()"
                                              class="btn btn-info btn-fill pull-right">Add</span>
                                    </div>

                                    <div class="footer">
                                        <hr>
                                        <div class="stats">
                                            <i class="fa fa-history"></i> Updated 3 minutes ago
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-info btn-fill pull-right">Update Lists</button>
            <div class="clearfix"></div>
        </form>


        <footer class="footer">
            <div class="container-fluid">
                <p class="copyright pull-right">
                    &copy;
                    <script>document.write(new Date().getFullYear())</script>
                    My Smart Mirror
                </p>
            </div>
        </footer>

    </div>
</div>


</body>

<!--   Core JS Files   -->
<script src="assets/js/jquery-1.10.2.js" type="text/javascript"></script>
<script src="assets/js/bootstrap.min.js" type="text/javascript"></script>

<!--  Checkbox, Radio & Switch Plugins -->
<script src="assets/js/bootstrap-checkbox-radio-switch.js"></script>

<!--  Charts Plugin -->
<script src="assets/js/chartist.min.js"></script>

<!--  Notifications Plugin    -->
<script src="assets/js/bootstrap-notify.js"></script>

<!--  Google Maps Plugin    -->
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>

<!-- Light Bootstrap Table Core javascript and methods for Demo purpose -->
<script src="assets/js/light-bootstrap-dashboard.js"></script>

<!-- Light Bootstrap Table DEMO methods, don't include it in your project! -->
<script src="assets/js/demo.js"></script>

<script type="text/javascript">
    $(document).ready(function () {

        demo.initChartist();

        $.notify({
            icon: 'pe-7s-ribbon',
            message: "Welcome to <b>My Smart Mirror</b> "

        }, {
            type: 'info',
            timer: 4000
        });

    });
</script>

<script>
    // -------------------------------------------------- Stocks ---------------------------------------------------- //
    // Variable for all close buttons
    var close = document.getElementsByClassName("close");

    // Create list of existing stock items
    var prev_stocks = document.getElementById("stocks").value.split("////");
    console.log('Prev Stocks:', prev_stocks)
    prev_stocks.forEach(function (stock) {
        newStockElement(stock);
        console.log(stock);
    });

    // Create a new list item when clicking on the "Add" button
    function newStockElement(string) {
        console.log(close.length);

        var inputValue;

        // Check to see if an input value is being passed to this function
        if (string) {
            inputValue = string;  // Create Todo list from Database
        } else {
            console.log('FROM BUTTON')

            inputValue = document.getElementById("stock_input").value;  // Added from the UI
            if (document.getElementById("stocks").value == '') {
                document.getElementById("stocks").value += ( inputValue);  // First one cannot have "////"  i.e.   a////b////c
            } else {
                document.getElementById("stocks").value += ('////' + inputValue);
            }
        }
        console.log('ADD STRING TO DB:', document.getElementById("stocks").value)

        if (inputValue === '') {
            console.log('No Input')
            return
        }

        console.log('INPUT VALUE: ', inputValue)

        // Create the Stock text values in the table
        var input = document.createTextNode(inputValue);

        var td1 = document.createElement("td");
        td1.appendChild(input);

        // Create the button accompanying Stock text
        var td2 = document.createElement("td");
        td2.className = "td-actions text-right";
        var removeButton = document.createElement("tr");
        removeButton.typeName = "button";
        removeButton.relName = "tooltip";
        removeButton.titleName = "Remove";
        removeButton.className = "btn btn-danger btn-simple btn-xs close";
        var i = document.createElement("i");
        i.className = "fa fa-times";
        removeButton.appendChild(i);
        td2.appendChild(removeButton);

        // Append the text and the button to the table row
        var tr = document.createElement("tr");
        tr.appendChild(td1);
        tr.appendChild(td2);

        document.getElementById("stock_UL").appendChild(tr);

        document.getElementById("stock_input").value = "";  // Clear the input

        // Remove the item from the list when clicked
        console.log(close.length);
        for (i = 0; i < close.length; i++) {
            close[i].onclick = function () {
                // Make the HTML element disappear
                var removeTR = this.parentElement.parentElement;
                var removed_string = removeTR.innerHTML.split("td>")[1];
                removed_string = removed_string.split("<")[0]; //this is used to update the database
                console.log(removed_string)


                console.log('DIV:', removeTR)
                removeTR.style.display = "none"
//                    div.style.display = "none"; // This is what Removes it visually from the html
                // Retrieve the current list of elements from the database


                var prev_stocks = document.getElementById("stocks").value.split("////");
                // Recreate the list of current elements but do not include item to be removed
                document.getElementById("stocks").value = '';
                prev_stocks.forEach(function (stock) {
                    if (stock !== removed_string) {
                        if (document.getElementById("stocks").value == '') {
                            document.getElementById("stocks").value += (stock);  // First one cannot have "////"  i.e.   a////b////c
                        } else {
                            document.getElementById("stocks").value += ('////' + stock);

                        }
                    }
                });
                console.log('REMOVE STRING TO DB:', document.getElementById("stocks").value)
            }
        }
    }

    // ------------------------------------------ To Do List ---------------------------------------------------- //

    var checkbox = document.getElementsByClassName("checkbox");

    // Create list of existing stock items
    var prev_todo = document.getElementById("to_do_list").value.split("////");
    console.log('Prev To Do:', prev_todo);
    prev_todo.forEach(function (todo_item) {
        newToDoElement(todo_item);
    });

    // Create a new list item when clicking on the "Add" button
    function newToDoElement(string) {
        console.log(close.length);

        var inputValue;

        // Check to see if an input value is being passed to this function
        if (string) {
            inputValue = string;  // Create Todo list from Database
        } else {
            console.log('FROM BUTTON')

            inputValue = document.getElementById("todo_input").value;  // Added from the UI
            if (document.getElementById("to_do_list").value == '') {
                document.getElementById("to_do_list").value += ( inputValue);  // First one cannot have "////"  i.e.   a////b////c
            } else {
                document.getElementById("to_do_list").value += ('////' + inputValue);
            }
        }


        if (inputValue === '') {
            console.log('No Input')
            return
        }

        console.log('INPUT VALUE: ', inputValue)

        // Create the todo text values in the table
        var input = document.createTextNode(inputValue);

        var td1 = document.createElement("td");
        td1.appendChild(input);

        // Create the button accompanying todo text

        var td2 = document.createElement("td");
        td2.className = "td-actions text-right";
        var editButton = document.createElement("tr");
        editButton.typeName = "button";
        editButton.relName = "tooltip";
        editButton.titleName = "Edit Task";
        editButton.className = "btn btn-info btn-simple btn-xs";  //TODO used to have "close" Add functionality for Edit here
        var i = document.createElement("i");
        i.className = "fa fa-edit";
        editButton.appendChild(i);
        td2.appendChild(editButton);


        var checkbox_label = document.createElement("label");
        checkbox_label.className = "checkbox";

        var span1 = document.createElement("span");
        span1.className = "icons"
        var span2 = document.createElement("span");
        span2.className = "first-icon fa fa-square-o"
        var span3 = document.createElement("span");
        span3.className = "second-icon fa fa-check-square-o";

        span1.appendChild(span2)
        span1.appendChild(span3)

        var checkbox_input_type = document.createElement("input");  //TODO <-- potential error if it create <input></input>
//            checkbox_input_type.type = "checkbox";
//            checkbox_input_type.value = "";

//            var attr = document.createAttribute('data-toggle');
//            attr.value = "checkbox"

        checkbox_input_type.setAttribute('type', 'checkbox');
        checkbox_input_type.setAttribute('data-toggle', 'checkbox');
        checkbox_input_type.setAttribute('value', ' ');
//            checkbox_input_type.setAttribute('checked',' ');

//            checkbox_input_type['data-toggle']="checkbox"; //TODO FINISH THIS - DATA TOGGLE FKED US UP LAST WEEK
//            checkbox_input_type.checked = "";
        checkbox_label.appendChild(span1)
        checkbox_label.appendChild(checkbox_input_type);


        var td3 = document.createElement("td");
        td3.appendChild(checkbox_label);
//

        // Append the text and the button to the table row
        var tr = document.createElement("tr");
        tr.appendChild(td1);
        tr.appendChild(td2);
        tr.appendChild(td3);

        document.getElementById("todo_UL").appendChild(tr);

        document.getElementById("todo_input").value = "";  // Clear the input

        // Remove the item from the list when clicked
        console.log('TODO CHECKBOX LENGTH:', checkbox.length);


        for (i = 0; i < checkbox.length; i++) {
            checkbox[i].onclick = function () {
                // get the to_do string from the html
                document.getElementById("to_do_list").value = '';
                var counter = 0
                setTimeout(function (args) {
                            for (var j = 0; j < checkbox.length; j++) {
                                var removeTR = checkbox[counter].parentElement.parentElement;
                                console.log(String(checkbox[counter].getAttribute('class')))
                                console.log(counter)


                                if ((String(checkbox[counter].getAttribute('class'))).indexOf('checked') === -1) {


                                    var to_do_item = removeTR.innerHTML.split("td>")[1];
                                    to_do_item = to_do_item.split("<")[0]; //this is used to update the database
                                    console.log(to_do_item)
                            if(document.getElementById("to_do_list").value !== ''){
                                document.getElementById("to_do_list").value += '////'
                            }
                            document.getElementById("to_do_list").value += to_do_item
                        }


//                        var prev_todo = document.getElementById("to_do_list").value.split("////");
//                        // Recreate the list of current elements but do not include item to be removed
//                        document.getElementById("to_do_list").value = '';
//                        prev_todo.forEach(function (todo) {
//                            if (todo !== removed_string) {
//                                if (document.getElementById("todo").value == '') {
//                                    document.getElementById("todo").value += (todo);  // First one cannot have "////"  i.e.   a////b////c
//                                } else {
//                                    document.getElementById("todo").value += ('////' + todo);
//                                }
//                            }
//                        });

                                counter++
                            }
                        }, 500 );

            }
        }
    }
    //        function update_to_do_list(){
    //            setTimeout(function (args) {
    //                for (var j = 0; j < checkbox.length; j++) {
    //                    var removeTR = checkbox[counter].parentElement.parentElement;
    //                    console.log(checkbox[counter].getAttribute('class'))
    //                    console.log(counter)
    //
    ////                        if ((checkbox[j]).indexOf('checked')===-1){
    //
    //
    //                    var to_do_item = removeTR.innerHTML.split("td>")[1];
    //                    to_do_item = to_do_item.split("<")[0]; //this is used to update the database
    //                    console.log(to_do_item)
    ////                            if(document.getElementById("to_do_list").value !== ''){
    ////                                document.getElementById("to_do_list").value += '////'
    ////                            }
    ////                            document.getElementById("to_do_list").value += to_do_item
    ////                        }
    //
    //
    //
    ////                        var prev_todo = document.getElementById("to_do_list").value.split("////");
    ////                        // Recreate the list of current elements but do not include item to be removed
    ////                        document.getElementById("to_do_list").value = '';
    ////                        prev_todo.forEach(function (todo) {
    ////                            if (todo !== removed_string) {
    ////                                if (document.getElementById("todo").value == '') {
    ////                                    document.getElementById("todo").value += (todo);  // First one cannot have "////"  i.e.   a////b////c
    ////                                } else {
    ////                                    document.getElementById("todo").value += ('////' + todo);
    ////                                }
    ////                            }
    ////                        });
    //                    counter ++
    //                }
    //            }, 1000);
    //        }
</script>

</html>
